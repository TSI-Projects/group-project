apiVersion: apps/v1
kind: Deployment
metadata: 
  name: {{ include "go.fullname" . | quote }}
spec:
  replicas: {{ .Values.replicasCount }}
  selector:
    matchLabels:
      {{- include "go.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "go.labels" . | nindent 8 }}
    spec:
      restartPolicy: Always
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ required "Golang server image should be provided" .Values.containerImage.name }}:{{ .Values.containerImage.tag | default "latest" }}"
        imagePullPolicy: Never
        ports:
        - name: "http"
          containerPort: {{ .Values.containerPort }}
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        env:
        {{- $secreName := "" }}
        {{- if .Values.databaseEnv.secretName }}
        {{- $secreName = .Values.databaseEnv.secretName }}
        {{- else if .Values.databaseEnv.secretNameTemplateRef }}
        {{- $secreName = include .Values.databaseEnv.secretNameTemplateRef.templateName (index .Subcharts .Values.databaseEnv.secretNameTemplateRef.chartName) }}
        {{- $secreName = printf "%s-app" $secreName }}
        {{- else }}
        {{- fail "No database secret name provided" }}
        {{- end }}
        - name: "PORT"
          value: {{ .Values.containerPort | quote }}
        - name: "APP_DEBUG"
          value: {{ .Values.debug | quote }}
        - name: "APP_ENV"
          value: {{ .Values.environment | quote }}
        - name: "DB_VENDOR"
          value: "postgres"
        - name: "DB_HOST"
          valueFrom: { secretKeyRef: { name: {{ $secreName }}, key: host } }
        - name: "DB_PORT"
          valueFrom: { secretKeyRef: { name: {{ $secreName }}, key: port } }
        - name: "DB_DATABASE"
          valueFrom: { secretKeyRef: { name: {{ $secreName }}, key: dbname } }
        - name: "DB_USER"
          valueFrom: { secretKeyRef: { name: {{ $secreName }}, key: user } }
        - name: "DB_PASSWORD"
          valueFrom: { secretKeyRef: { name: {{ $secreName }}, key: password } }
